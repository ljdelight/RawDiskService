/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ljdelight.rawdisk.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)")
public class DiskDevice implements org.apache.thrift.TBase<DiskDevice, DiskDevice._Fields>, java.io.Serializable, Cloneable, Comparable<DiskDevice> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DiskDevice");

  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BLOCK_SIZE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("block_size_bytes", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_LBA_BLOCKS_FIELD_DESC = new org.apache.thrift.protocol.TField("total_lba_blocks", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TOTAL_SPACE_FIELD_DESC = new org.apache.thrift.protocol.TField("totalSpace", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DiskDeviceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DiskDeviceTupleSchemeFactory());
  }

  public String path; // required
  public long block_size_bytes; // required
  public long total_lba_blocks; // required
  public long totalSpace; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PATH((short)1, "path"),
    BLOCK_SIZE_BYTES((short)2, "block_size_bytes"),
    TOTAL_LBA_BLOCKS((short)3, "total_lba_blocks"),
    TOTAL_SPACE((short)4, "totalSpace");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PATH
          return PATH;
        case 2: // BLOCK_SIZE_BYTES
          return BLOCK_SIZE_BYTES;
        case 3: // TOTAL_LBA_BLOCKS
          return TOTAL_LBA_BLOCKS;
        case 4: // TOTAL_SPACE
          return TOTAL_SPACE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BLOCK_SIZE_BYTES_ISSET_ID = 0;
  private static final int __TOTAL_LBA_BLOCKS_ISSET_ID = 1;
  private static final int __TOTALSPACE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BLOCK_SIZE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("block_size_bytes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_LBA_BLOCKS, new org.apache.thrift.meta_data.FieldMetaData("total_lba_blocks", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOTAL_SPACE, new org.apache.thrift.meta_data.FieldMetaData("totalSpace", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DiskDevice.class, metaDataMap);
  }

  public DiskDevice() {
  }

  public DiskDevice(
    String path,
    long block_size_bytes,
    long total_lba_blocks,
    long totalSpace)
  {
    this();
    this.path = path;
    this.block_size_bytes = block_size_bytes;
    setBlock_size_bytesIsSet(true);
    this.total_lba_blocks = total_lba_blocks;
    setTotal_lba_blocksIsSet(true);
    this.totalSpace = totalSpace;
    setTotalSpaceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DiskDevice(DiskDevice other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPath()) {
      this.path = other.path;
    }
    this.block_size_bytes = other.block_size_bytes;
    this.total_lba_blocks = other.total_lba_blocks;
    this.totalSpace = other.totalSpace;
  }

  public DiskDevice deepCopy() {
    return new DiskDevice(this);
  }

  @Override
  public void clear() {
    this.path = null;
    setBlock_size_bytesIsSet(false);
    this.block_size_bytes = 0;
    setTotal_lba_blocksIsSet(false);
    this.total_lba_blocks = 0;
    setTotalSpaceIsSet(false);
    this.totalSpace = 0;
  }

  public String getPath() {
    return this.path;
  }

  public DiskDevice setPath(String path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public long getBlock_size_bytes() {
    return this.block_size_bytes;
  }

  public DiskDevice setBlock_size_bytes(long block_size_bytes) {
    this.block_size_bytes = block_size_bytes;
    setBlock_size_bytesIsSet(true);
    return this;
  }

  public void unsetBlock_size_bytes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BLOCK_SIZE_BYTES_ISSET_ID);
  }

  /** Returns true if field block_size_bytes is set (has been assigned a value) and false otherwise */
  public boolean isSetBlock_size_bytes() {
    return EncodingUtils.testBit(__isset_bitfield, __BLOCK_SIZE_BYTES_ISSET_ID);
  }

  public void setBlock_size_bytesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BLOCK_SIZE_BYTES_ISSET_ID, value);
  }

  public long getTotal_lba_blocks() {
    return this.total_lba_blocks;
  }

  public DiskDevice setTotal_lba_blocks(long total_lba_blocks) {
    this.total_lba_blocks = total_lba_blocks;
    setTotal_lba_blocksIsSet(true);
    return this;
  }

  public void unsetTotal_lba_blocks() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTAL_LBA_BLOCKS_ISSET_ID);
  }

  /** Returns true if field total_lba_blocks is set (has been assigned a value) and false otherwise */
  public boolean isSetTotal_lba_blocks() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTAL_LBA_BLOCKS_ISSET_ID);
  }

  public void setTotal_lba_blocksIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTAL_LBA_BLOCKS_ISSET_ID, value);
  }

  public long getTotalSpace() {
    return this.totalSpace;
  }

  public DiskDevice setTotalSpace(long totalSpace) {
    this.totalSpace = totalSpace;
    setTotalSpaceIsSet(true);
    return this;
  }

  public void unsetTotalSpace() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALSPACE_ISSET_ID);
  }

  /** Returns true if field totalSpace is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalSpace() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALSPACE_ISSET_ID);
  }

  public void setTotalSpaceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALSPACE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((String)value);
      }
      break;

    case BLOCK_SIZE_BYTES:
      if (value == null) {
        unsetBlock_size_bytes();
      } else {
        setBlock_size_bytes((Long)value);
      }
      break;

    case TOTAL_LBA_BLOCKS:
      if (value == null) {
        unsetTotal_lba_blocks();
      } else {
        setTotal_lba_blocks((Long)value);
      }
      break;

    case TOTAL_SPACE:
      if (value == null) {
        unsetTotalSpace();
      } else {
        setTotalSpace((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PATH:
      return getPath();

    case BLOCK_SIZE_BYTES:
      return getBlock_size_bytes();

    case TOTAL_LBA_BLOCKS:
      return getTotal_lba_blocks();

    case TOTAL_SPACE:
      return getTotalSpace();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PATH:
      return isSetPath();
    case BLOCK_SIZE_BYTES:
      return isSetBlock_size_bytes();
    case TOTAL_LBA_BLOCKS:
      return isSetTotal_lba_blocks();
    case TOTAL_SPACE:
      return isSetTotalSpace();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DiskDevice)
      return this.equals((DiskDevice)that);
    return false;
  }

  public boolean equals(DiskDevice that) {
    if (that == null)
      return false;

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_block_size_bytes = true;
    boolean that_present_block_size_bytes = true;
    if (this_present_block_size_bytes || that_present_block_size_bytes) {
      if (!(this_present_block_size_bytes && that_present_block_size_bytes))
        return false;
      if (this.block_size_bytes != that.block_size_bytes)
        return false;
    }

    boolean this_present_total_lba_blocks = true;
    boolean that_present_total_lba_blocks = true;
    if (this_present_total_lba_blocks || that_present_total_lba_blocks) {
      if (!(this_present_total_lba_blocks && that_present_total_lba_blocks))
        return false;
      if (this.total_lba_blocks != that.total_lba_blocks)
        return false;
    }

    boolean this_present_totalSpace = true;
    boolean that_present_totalSpace = true;
    if (this_present_totalSpace || that_present_totalSpace) {
      if (!(this_present_totalSpace && that_present_totalSpace))
        return false;
      if (this.totalSpace != that.totalSpace)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_path = true && (isSetPath());
    list.add(present_path);
    if (present_path)
      list.add(path);

    boolean present_block_size_bytes = true;
    list.add(present_block_size_bytes);
    if (present_block_size_bytes)
      list.add(block_size_bytes);

    boolean present_total_lba_blocks = true;
    list.add(present_total_lba_blocks);
    if (present_total_lba_blocks)
      list.add(total_lba_blocks);

    boolean present_totalSpace = true;
    list.add(present_totalSpace);
    if (present_totalSpace)
      list.add(totalSpace);

    return list.hashCode();
  }

  @Override
  public int compareTo(DiskDevice other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBlock_size_bytes()).compareTo(other.isSetBlock_size_bytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlock_size_bytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.block_size_bytes, other.block_size_bytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotal_lba_blocks()).compareTo(other.isSetTotal_lba_blocks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotal_lba_blocks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.total_lba_blocks, other.total_lba_blocks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalSpace()).compareTo(other.isSetTotalSpace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalSpace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalSpace, other.totalSpace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DiskDevice(");
    boolean first = true;

    sb.append("path:");
    if (this.path == null) {
      sb.append("null");
    } else {
      sb.append(this.path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("block_size_bytes:");
    sb.append(this.block_size_bytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("total_lba_blocks:");
    sb.append(this.total_lba_blocks);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalSpace:");
    sb.append(this.totalSpace);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (path == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'path' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'block_size_bytes' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'total_lba_blocks' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'totalSpace' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DiskDeviceStandardSchemeFactory implements SchemeFactory {
    public DiskDeviceStandardScheme getScheme() {
      return new DiskDeviceStandardScheme();
    }
  }

  private static class DiskDeviceStandardScheme extends StandardScheme<DiskDevice> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DiskDevice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BLOCK_SIZE_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.block_size_bytes = iprot.readI64();
              struct.setBlock_size_bytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_LBA_BLOCKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.total_lba_blocks = iprot.readI64();
              struct.setTotal_lba_blocksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOTAL_SPACE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.totalSpace = iprot.readI64();
              struct.setTotalSpaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBlock_size_bytes()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'block_size_bytes' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotal_lba_blocks()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'total_lba_blocks' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTotalSpace()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'totalSpace' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DiskDevice struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.path != null) {
        oprot.writeFieldBegin(PATH_FIELD_DESC);
        oprot.writeString(struct.path);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BLOCK_SIZE_BYTES_FIELD_DESC);
      oprot.writeI64(struct.block_size_bytes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_LBA_BLOCKS_FIELD_DESC);
      oprot.writeI64(struct.total_lba_blocks);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_SPACE_FIELD_DESC);
      oprot.writeI64(struct.totalSpace);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DiskDeviceTupleSchemeFactory implements SchemeFactory {
    public DiskDeviceTupleScheme getScheme() {
      return new DiskDeviceTupleScheme();
    }
  }

  private static class DiskDeviceTupleScheme extends TupleScheme<DiskDevice> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DiskDevice struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.path);
      oprot.writeI64(struct.block_size_bytes);
      oprot.writeI64(struct.total_lba_blocks);
      oprot.writeI64(struct.totalSpace);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DiskDevice struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.path = iprot.readString();
      struct.setPathIsSet(true);
      struct.block_size_bytes = iprot.readI64();
      struct.setBlock_size_bytesIsSet(true);
      struct.total_lba_blocks = iprot.readI64();
      struct.setTotal_lba_blocksIsSet(true);
      struct.totalSpace = iprot.readI64();
      struct.setTotalSpaceIsSet(true);
    }
  }

}

